[
    {
        "title": "What is Java?",
        "description": "Java is a programming language and a platform. Java is a high level, robust, object-oriented and secure programming language. Java was developed by Sun Microsystems (which is now the subsidiary of Oracle) in the year 1995. James Gosling is known as the father of Java. Before Java, its name was Oak. Since Oak was already a registered company, so James Gosling and his team changed the name from Oak to Java.",
        "documentation": {
            "href": "/learning/CoreJava/WhatIsJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "History of Java",
        "description": "The history of Java is very interesting. Java was originally designed for interactive television, but it was too advanced technology for the digital cable television industry at the time. The history of Java starts with the Green Team. Java team members (also known as Green Team), initiated this project to develop a language for digital devices such as set-top boxes, televisions, etc. However, it was best suited for internet programming. Later, Java technology was incorporated by Netscape. The principles for creating Java programming were \"Simple, Robust, Portable, Platform-independent, Secured, High Performance, Multithreaded, Architecture Neutral, Object-Oriented, Interpreted, and Dynamic\". Java was developed by James Gosling, who is known as the father of Java, in 1995. James Gosling and his team members started the project in the early '90s.",
        "documentation": {
            "href": "/learning/CoreJava/HistoryOfJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Features of Java",
        "description": "The primary objective of Java programming language creation was to make it portable, simple and secure programming language. Apart from this, there are also some excellent features which play an important role in the popularity of this language. The features of Java are also known as Java buzzwords.",
        "documentation": {
            "href": "/learning/CoreJava/FeaturesOfJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "First Java Program Hello world Example",
        "description": "In this section, we will learn how to write the simple program of Java. We can write a simple hello Java program easily after installing the JDK. To create a simple Java program, you need to create a class that contains the main method. Let's understand the requirement first. For executing any Java program, the following software or application must be properly installed. Install the JDK if you don't have installed it, download the JDK and install it. Set path of the jdk/bin directory. http://www.javatpoint.com/how-to-set-path-in-java. Create the Java program. Compile and run the Java program.",
        "documentation": {
            "href": "/learning/CoreJava/FirstJavaProgramHelloWorldExample.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Internal Details of Hello Java Program",
        "description": "In the previous section, we have created Java Hello World program and learn how to compile and run a Java program. In this section, we are going to learn, what happens while we compile and run the Java program. Moreover, we will see some questions based on the first program. What happens at compile time? At compile time, the Java file is compiled by Java Compiler (It does not interact with OS) and converts the Java code into bytecode.",
        "documentation": {
            "href": "/learning/CoreJava/InternalDetailsOfHelloJavaProgram.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "JDK JVM JRE",
        "description": "We must understand the differences between JDK, JRE, and JVM before proceeding further to Java. See the brief overview of JVM here. If you want to get the detailed knowledge of Java Virtual Machine, move to the next page. Firstly, let's see the differences between the JDK, JRE, and JVM. JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.",
        "documentation": {
            "href": "/learning/CoreJava/JDK JVM JRE.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "JDK JVM JRE",
        "description": "We must understand the differences between JDK, JRE, and JVM before proceeding further to Java. See the brief overview of JVM here. If you want to get the detailed knowledge of Java Virtual Machine, move to the next page. Firstly, let's see the differences between the JDK, JRE, and JVM. JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.",
        "documentation": {
            "href": "/learning/CoreJava/JDK JVM JRE.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Java Variables",
        "description": "A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type. Variable is a name of memory location. There are three types of variables in java: local, instance and static. There are two types of data types in Java: primitive and non-primitive. A variable is the name of a reserved area allocated in memory. In other words, it is a name of the memory location. It is a combination of \"vary + able\" which means its value can be changed.",
        "documentation": {
            "href": "/learning/CoreJava/JavaVariables.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/VariablesInJavaAndItsDefaultValues/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Data types in Java",
        "description": "Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java: Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double. Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays. In Java language, primitive data types are the building blocks of data manipulation. These are the most basic data types available in Java language. There are 8 types of primitive data types:",
        "documentation": {
            "href": "/learning/CoreJava/DataTypesInJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/PrimitiveDataTypesAndItsDefaultValues/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Unicode System",
        "description": "Unicode is a universal international standard character encoding that is capable of representing most of the world's written languages. Why java uses Unicode System? Before Unicode, there were many language standards: ASCII (American Standard Code for Information Interchange) for the United States. ISO 8859-1 for Western European Language. KOI-8 for Russian. GB18030 and BIG-5 for chinese, and so on.",
        "documentation": {
            "href": "/learning/CoreJava/UnicodeSystem.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Comments In Java",
        "description": "The Java comments are the statements in a program that are not executed by the compiler and interpreter. Why do we use comments in a code? Comments are used to make the program more readable by adding the details of the code. It makes easy to maintain the code and to find the errors easily. The comments can be used to provide information or explanation about the variable, method, class, or any statement.",
        "documentation": {
            "href": "/learning/CoreJava/CommentsInJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Operators in Java",
        "description": "Operator in Java is a symbol that is used to perform operations. For example: +, -, *, / etc. There are many types of operators in Java which are given below: Unary Operator, Arithmetic Operator, Shift Operator, Relational Operator, Bitwise Operator, Logical Operator, Ternary Operator and Assignment Operator.",
        "documentation": {
            "href": "/learning/CoreJava/OperatorsInJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/Operators/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Keywords in Java",
        "description": "Java keywords are also known as reserved words. Keywords are particular words that act as a key to a code. These are predefined words by Java so they cannot be used as a variable or object name or class name. abstract, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, float, for, if, implements, import, instanceof, int, interface, long, native, new, null, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while",
        "documentation": {
            "href": "/learning/CoreJava/JavaKeywords.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Difference between println and print",
        "description": "Both the statements are used print something in the console. println() method in Java is also used to display a text on the console. This text is passed as the parameter to this method in the form of String. This method prints the text on the console and the cursor remains at the start of the next line at the console. The next printing takes place from next line.",
        "documentation": {
            "href": "/learning/CoreJava/DifferenceBetweenPrintlnAndPrint.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    },
    {
        "title": "Conditional Statements",
        "description": "The Java if statement is used to test the condition. It checks boolean condition: true or false. There are various types of if statement in Java as follows. 1. if statement 2. if-else statement 3. if-else-if ladder 4. nested if statement",
        "documentation": {
            "href": "/learning/CoreJava/ConditionalStatements.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/ConditionalStatements/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Switch Statement",
        "description": "The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. The switch statement works with byte, short, int, char, enum types, String and some wrapper types like Byte, Short, Int, and Character. Since Java 7, you can use strings in the switch statement. In other words, the switch statement tests the equality of a variable against multiple values. Points to Remember 1. There can be one or N number of case values for a switch expression. 2. The case value must be of switch expression type only. The case value must be literal or constant. It doesn't allow variables. 3. The case values must be unique. In case of duplicate value, it renders compile-time error. 4. The Java switch expression must be of byte, short, int, long (with its Wrapper type), enums and string. 5. Each case statement can have a break statement which is optional. When control reaches to the break statement, it jumps the control after the switch expression. If a break statement is not found, it executes the next case. 6. The case value can have a default label which is optional.",
        "documentation": {
            "href": "/learning/CoreJava/SwitchStatement.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/SwitchStatement/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Loops in Java",
        "description": "In programming, sometimes we need to execute the block of code repeatedly while some condition evaluates to true. However, loop statements are used to execute the set of instructions in a repeated order. The execution of the set of instructions depends upon a particular condition. In Java, we have three types of loops that execute similarly. However, there are differences in their syntax and condition checking time. 1. for loop 2. for-each (or) enhanced for loop 3. while loop 4. do-while loop",
        "documentation": {
            "href": "/learning/CoreJava/LoopsInJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/Loops/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Control flow or Jump Statements",
        "description": "Jump statements are used to transfer the control of the program to the specific statements. In other words, jump statements transfer the execution control to the other part of the program. There are two types of jump statements in Java, i.e., break and continue. As the name suggests, the break statement is used to break the current flow of the program and transfer the control to the next statement outside a loop or switch statement. However, it breaks only the inner loop in the case of the nested loop. The break statement cannot be used independently in the Java program, i.e., it can only be written inside the loop or switch statement.",
        "documentation": {
            "href": "/learning/CoreJava/ControlFlowOrJumpStatements.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "https://github.com/MannemLokesh/CoreJava/tree/master/ControlFlowOrJumpStatements/src/com/lokesh",
            "target": "_blank"
        }
    },
    {
        "title": "Methods in Java",
        "description": "A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. Why use methods? To reuse code: define the code once, and use it many times. Methods can be classified into two types. 1. User Defined Methods: These Methods are created by us depends upon the usage. 2. Pre Defined Methods: These Methods are nothing but built in Methods. These Methods are already in the JDK. So that we will use it directly.",
        "documentation": {
            "href": "/learning/CoreJava/MethodsInJava.html",
            "target": "_blank"
        },
        "github_examples": {
            "href": "#",
            "target": null
        }
    }
    
]
